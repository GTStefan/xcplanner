#!/usr/bin/python

from optparse import OptionParser
import os.path
import re
import stat
from struct import pack
import sys
from tempfile import NamedTemporaryFile
from urllib2 import HTTPError, urlopen
from zipfile import ZipFile


SRTM_DIR = 'srtm'
#URL = 'http://srtm.csi.cgiar.org/SRT-ZIP/SRTM_v41/SRTM_Data_ArcASCII/'
URL = 'ftp://xftp.jrc.it/pub/srtmV4/arcasci/'


def main(argv):
    parser = OptionParser()
    parser.add_option('-i', type=int)
    parser.add_option('-j', type=int)
    options, args = parser.parse_args(argv[1:])
    basename = 'srtm_%02d_%02d' % (options.i, options.j)
    zip_filename = os.path.join(SRTM_DIR, 'zip', basename + '.zip')
    if not os.path.exists(zip_filename):
        tmp_file = NamedTemporaryFile(delete=False, dir=os.path.join(SRTM_DIR, 'tmp'), prefix=basename, suffix='.zip')
        try:
            try:
                url = urlopen(URL + basename + '.zip')
                buffer = url.read(65536)
                while buffer:
                    tmp_file.write(buffer)
                    buffer = url.read(65536)
            except HTTPError:
                if sys.exc_info()[1].code != 404:
                    raise
            os.chmod(tmp_file.name, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)
            os.rename(tmp_file.name, zip_filename)
        except:
            os.remove(tmp_file.name)
    tile_filename = os.path.join(SRTM_DIR, 'tile', basename + '.tile')
    if not os.path.exists(tile_filename):
        tmp_file = NamedTemporaryFile(delete=False, dir=os.path.join(SRTM_DIR, 'tmp'), prefix=basename, suffix='.tile')
        try:
            if os.path.getsize(zip_filename):
                asc_file = ZipFile(zip_filename).open(basename + '.asc')
                ncols = int(re.match(r'ncols\s+(\d+)\Z', asc_file.readline().rstrip()).group(1))
                assert ncols == 6000
                nrows = int(re.match(r'nrows\s+(\d+)\Z', asc_file.readline().rstrip()).group(1))
                assert nrows == 6000
                xllcorner = int(re.match(r'xllcorner\s+(-?\d+)\Z', asc_file.readline().rstrip()).group(1))
                yllcorner = float(re.match(r'yllcorner\s+(-?\d+(?:\.\d*)?)\Z', asc_file.readline().rstrip()).group(1))
                cellsize = float(re.match(r'cellsize\s+(\d+(?:\.\d*)?)\Z', asc_file.readline().rstrip()).group(1))
                NODATA_value = int(re.match(r'NODATA_value\s+(-?\d+)\Z', asc_file.readline().rstrip()).group(1))
                for i in xrange(0, nrows):
                    tmp_file.write(pack('!%dh' % ncols, *map(int, asc_file.readline().split())))
            os.chmod(tmp_file.name, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)
            os.rename(tmp_file.name, tile_filename)
        except:
            os.remove(tmp_file.name)


if __name__ == '__main__':
    main(sys.argv)
